# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: üß™Staging API Deployment

on:
  push:
    branches: ['main']
env:
  SWASHBUCLE_ASPNET_CORE_CLI_PACKAGE_VERSION: 8.0.x
  SWASHBUCKLE_DOTNET_CORE_VERSION: 8.0.x
  API_IMPORT_SPECIFICATION_PATH: Gamex/publish/swagger.json
  API_IMPORT_DLL: Gamex/bin/Release/net8.0/Gamex.dll
  API_IMPORT_VERSION: v1
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 8.0.x
  WORKING_DIRECTORY: Gamex
  TEST_DIRECTORY: Gamex.Test
  WEBAPP_PACKAGE_PATH: Gamex/publish
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: ‚úÖ App Settings Variable Substitution
        uses: microsoft/variable-substitution@v1
        with:
          files: '${{env.WORKING_DIRECTORY}}/appsettings.json'
        env:
          Cloudinary.Url: ${{ secrets.CLOUDINARY_URL }}
          Authentication.Google.ClientId: ${{ secrets.GOOGLE_CLIENTID }}
          Authentication.Google.ClientSecret: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          Authentication.Google.MobileClientId: ${{ secrets.GOOGLE_MOBILE_CLIENTID }}
          ConnectionStrings.DefaultConnection: ${{ secrets.DB_CONNECTION }}
          ConnectionStrings.RedisConnection: ${{ secrets.REDIS_DB_CONNECTION }}
          JWT.Secret: ${{ secrets.JWT_SECRET }}
          Paystack.SecretKey: ${{ secrets.PAYSTACK_SECRET_KEY }}
          Paystack.PublicKey: ${{ secrets.PAYSTACK_PUBLIC_KEY }}
          SMTP.Host: ${{ secrets.SMTP_HOST }}
          SMTP.Port: ${{ secrets.SMTP_PORT }}
          SMTP.Username: ${{ secrets.SMTP_USERNAME }}
          SMTP.Password: ${{ secrets.SMTP_PASSWORD }}
          SMTP.From: ${{ secrets.SMTP_FROM }}
          SMTP.DisplayName: ${{ secrets.SMTP_DISPLAYNAME }}
          SMTP.EnableSSL: ${{ secrets.SMTP_ENABLESSL }}
          Sentry.Dsn: ${{ secrets.SENTRY_DSN }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
      - name: üîÅ Restore
        run: dotnet restore ${{ env.WORKING_DIRECTORY }}
      - name: üè≠ Build
        run: dotnet build ${{ env.WORKING_DIRECTORY }} --configuration ${{ env.CONFIGURATION }} --no-restore
      - name: üß™ Test
        run: dotnet test ${{ env.WORKING_DIRECTORY }} --no-build
      - name: üì¢ Publish
        run: dotnet publish ${{ env.WORKING_DIRECTORY }} --configuration ${{ env.CONFIGURATION }} --no-build --output ${{ env.WEBAPP_PACKAGE_PATH }}
      - name: Publish Artifacts
        uses: actions/upload-artifact@v1.0.0
        with:
          name: webapp
          path: ${{ env.WEBAPP_PACKAGE_PATH }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: üõú Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: webapp
          path: ${{ env.WEBAPP_PACKAGE_PATH }}
      - name: üìÇ Sync files
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: 66.23.234.6
          # Ftp username
          username: ${{ secrets.FTP_USERNAME }}
          # Ftp password
          password: ${{ secrets.FTP_PASSWORD }}
          # The remote folder location of your FTP server
          server-dir: /
          local-dir: ${{ env.WEBAPP_PACKAGE_PATH }}/
          dry-run: false
