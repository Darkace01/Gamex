@page "/posts"
@attribute [Authorize(Roles = AppConstant.AdminUserRole)]
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: true))
@* @rendermode InteractiveAuto *@
@inject IRepositoryServiceManager RepositoryServiceManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

<PageTitle>Posts</PageTitle>

<div class="row">
    <div class="col-md-6">
        <h1>Posts</h1>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <a href="/posts/create" class="btn btn-primary">Create Post</a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <QuickGrid Items="@PostFiltered" Pagination="@pagination" Virtualize="true" @ref="PostGrid">
            <PropertyColumn Property="@(p => p.Title)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Content.Substring(0, Math.Min(p.Content.Length, 50)))" />

            <PropertyColumn Property="@(p => p.User.DisplayName)" Sortable="true" />
            <TemplateColumn Title="Archieved" Sortable="true">
                @if (context.IsArchived == true)
                {
                    <span class="badge bg-success">Yes</span>
                }
                else
                {
                    <span class="badge bg-secondary">No</span>
                }
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                <a href="/posts/edit@context.Id" class="btn btn-primary">Edit</a>
                <button class="btn btn-danger" @onclick="(() => HandleDelete(context))">Delete</button>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination" />
    </div>
</div>

@code {
    QuickGrid<PostDTO>? PostGrid;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private IQueryable<PostDTO>? PostList = null;

    protected override void OnInitialized()
    {
        PostList = RepositoryServiceManager.PostService.GetAllPosts().ToList().AsQueryable();
    }

    IQueryable<PostDTO> PostFiltered
    {
        get
        {
            return PostList ?? Enumerable.Empty<PostDTO>().AsQueryable();
        }
    }

    private async Task HandleDelete(PostDTO post)
    {
        NavigationManager.NavigateTo("/posts");
        var currentUser = await GetCurrentUser();
        await RepositoryServiceManager.PostService.DeletePost(post.Id, currentUser);
        await PostGrid.RefreshDataAsync();

    }

    private async Task<ApplicationUser> GetCurrentUser()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authenticationState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        return user;
    }
}
