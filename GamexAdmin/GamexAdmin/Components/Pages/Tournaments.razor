@page "/tournaments"
@attribute [Authorize(Roles = AppConstant.AdminUserRole)]
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: true))
@* @rendermode InteractiveAuto *@
@inject IRepositoryServiceManager RepositoryServiceManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Tournaments</PageTitle>

<div class="row">
    <div class="col-md-6">
        <h1>Tournaments</h1>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <a href="/tournaments/create" class="btn btn-primary">Create Tournament</a>
        </div>
    </div>
</div>
<div class="card">
    <div class="card-body">
        <QuickGrid Items="@TournamentFiltered" Pagination="@pagination" Virtualize="true" @ref="TournamentGrid">
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.StartDate)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(p => p.EndDate)" Format="yyyy-MM-dd" Sortable="true" />
            <TemplateColumn Title="Is Featured">
                <div class="d-flex justify-content-between">
                    @{
                        if (context.IsFeatured == false)
                        {
                            <span class="badge bg-secondary">Not Featured</span>
                        }
                        else
                        {
                            <span class="badge bg-primary">Featured</span>
                        }
                    }
                </div>
            </TemplateColumn>
            <PropertyColumn Property="@(p => p.Location)" Sortable="true" />
            <PropertyColumn Property="@(p => p.TotalRegisteredCount)" Title="Registered Users" Sortable="true" />
            <TemplateColumn Title="Categories">
                <div class="d-flex justify-content-between">
                    @if (context.Categories is not null)
                    {
                        foreach (var category in context.Categories)
                        {
                            <span class="badge bg-dark">@category.Name</span>
                        }
                    }
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Rounds">
                <div class="d-flex justify-content-between">
                    <span class="badge bg-info">@context.RoundsCount</span>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                <a href="/tournaments/edit/@context.Id" class="btn btn-primary">Edit</a>
                <a href="/tournaments/manage-users/@context.Id" class="btn btn-info">Manage</a>
                <button class="btn btn-danger" @onclick="(() => HandleDelete(context))">Delete</button>
                <a href="/tournaments/manage-rounds/@context.Id" class="btn btn-outline-primary">Manage Rounds</a>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination" />
    </div>
</div>
@code {
    private IQueryable<TournamentDTO> TournamentList = null;
    QuickGrid<TournamentDTO> TournamentGrid;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private bool IsLoading { get; }

    protected override void OnInitialized()
    {
        TournamentList = RepositoryServiceManager.TournamentService.GetAllTournaments().ToList().AsQueryable();
    }

    IQueryable<TournamentDTO> TournamentFiltered
    {
        get
        {

            return TournamentList;
        }

    }

    private async Task HandleDelete(TournamentDTO tournament)
    {
        var currentUser = await GetCurrentUser();
        await RepositoryServiceManager.TournamentService.DeleteTournament(tournament.Id, currentUser);
        await TournamentGrid.RefreshDataAsync();
        OnInitialized();
    }

    private async Task<ApplicationUser> GetCurrentUser()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authenticationState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        return user;
    }
}