@page "/tournaments"
@attribute [Authorize(Roles = AppConstant.AdminUserRole)]
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: true))
@inject ITournamentService TournamentService

<PageTitle>Tournaments</PageTitle>

<div class="row">
    <div class="col-md-6">
        <h1>Tournaments</h1>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <a href="/tournaments/create" class="btn btn-primary">Create Tournament</a>
        </div>
    </div>
</div>
<div class="card">
    <div class="card-body">
        <QuickGrid Items="@TournamentFiltered" Pagination="@pagination" Virtualize="true">
            <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
            <PropertyColumn Property="@(p => p.StartDate)" Format="yyyy-MM-dd" Sortable="true" />
            <PropertyColumn Property="@(p => p.EndDate)" Format="yyyy-MM-dd" Sortable="true" />
            <TemplateColumn Title="Is Featured">
                <div class="d-flex justify-content-between">
                    @{
                        if (context.IsFeatured == false)
                        {
                            <p>Not Featured</p>
                        }
                        else
                        {
                            <p>Featured</p>
                        }
                    }
                </div>
            </TemplateColumn>
            <PropertyColumn Property="@(p => p.Location)" Sortable="true" />
            <TemplateColumn Title="Actions">
                <a href="/tournaments/edit/@context.Id" class="btn btn-primary">Edit</a>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="@pagination" />
    </div>
</div>
@code {
    private IQueryable<TournamentDTO> TournamentList = null;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override void OnInitialized()
    {
        TournamentList = TournamentService.GetAllTournaments().ToList().AsQueryable();
    }

    IQueryable<TournamentDTO> TournamentFiltered
    {
        get
        {

            return TournamentList;
        }

    }
}