@page "/posts/edit/{Id}"
@attribute [Authorize(Roles = AppConstant.AdminUserRole)]
@inject IRepositoryServiceManager RepositoryServiceManager
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveServerRenderMode(prerender: true))

<div class="row">
    <div class="col-md-6">
        <h1>Update Post</h1>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <a href="/posts" class="btn btn-secondary">Go Back</a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <EditForm Model="@Model" OnValidSubmit="HandleSubmit" FormName="CreatePost" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" role="alert" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <div class="form-floating mb-3">
                <InputText @bind-Value="@Model!.Title" class="form-control" autocomplete="title" aria-required="true" placeholder="Please enter post title." disabled="@IsLoading" />
                <label for="title" class="form-label">Title</label>
                <ValidationMessage For="@(() => Model.Title)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputTextArea @bind-Value="@Model.Content" class="form-control" autocomplete="content" aria-required="true" placeholder="Please enter post content." row="4" disabled="@IsLoading" />
                <label for="content" class="form-label">Content</label>
                <ValidationMessage For="@(() => Model.Content)" class="text-danger" />
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="file-upload" class="form-label">Featured Image</label>
                        <InputFile class="form-control" OnChange="HandleFileUpload" disabled="@IsLoading" id="file-upload" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="tag" class="form-label">Tag</label>
                        <InputSelect @bind-Value="@TagId" class="form-control" disabled="@IsLoading">
                            <option value="">Select a tag</option>
                            @foreach (var tag in Tags)
                            {
                                var selected = Model.TagIds.Any(x => x == tag.Id) ? "selected" : "_";
                                <option value="@tag.Id" selected="@selected">@tag.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => TagId)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary" disabled="@IsLoading">
                    @{
                        if (IsLoading == true)
                        {
                            <Loading />
                        }
                    }Update
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    [SupplyParameterFromForm]
    private PostUpdateDTO? Model { get; set; }

    public string errorMessage { get; set; } = "";
    public string TagId { get; set; } = "";

    private List<TagDTO> Tags { get; set; } = new();

    private bool IsLoading { get; set; } = false;
    long maxFileSize = 1024 * 1024 * 10;
    string[] imageFileExtension = { ".jpg", ".jpeg", ".png", ".gif", ".webp" };

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        _ = Guid.TryParse(Id, out Guid postId);
        var post = RepositoryServiceManager.PostService.GetPost(postId);
        if (post is not null)
        {
            Model = new PostUpdateDTO
                {
                    Id = post.Id,
                    Title = post.Title,
                    Content = post.Content,
                    PictureId = post.PictureId,
                    TagIds = post.Tag.Select(x => x.Id).ToList()
                };
        }
        Tags = RepositoryServiceManager.TagService.GetAllTags().ToList();
    }

    private async Task HandleSubmit()
    {
        if (IsLoading == true) return;
        IsLoading = true;

        try
        {
            var currentUser = await GetCurrentUser();
            if (!string.IsNullOrWhiteSpace(TagId))
            {
                _ = Guid.TryParse(TagId, out Guid tagId);
                Model!.TagIds = new List<Guid> { tagId };
            }
            var post = await RepositoryServiceManager.PostService.UpdatePost(Model!, currentUser);
            IsLoading = false;
            NavigationManager.NavigateTo("/posts");
        }
        catch (Exception)
        {
            errorMessage = "An error has occurred, please contact your administrator for help";
            IsLoading = false;
        }
    }

    private async Task<ApplicationUser> GetCurrentUser()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authenticationState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        return user!;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            if (IsLoading == true) return;
            IsLoading = true;
            var file = e.File;

            if (file is not null)
            {
                var (isValid, error) = CommonHelpers.CheckFileSize(file, maxFileSize);

                if (!isValid)
                {
                    errorMessage = error;
                    IsLoading = false;
                    return;
                }

                var (isImage, errorImage) = CommonHelpers.CheckFileExtension(file, imageFileExtension);

                if (!isImage)
                {
                    errorMessage = errorImage;
                    IsLoading = false;
                    return;
                }

                if (Model?.PictureId.HasValue == true)
                {
                    var picture = await RepositoryServiceManager.PictureService.GetPicture(Model.PictureId.Value);
                    if (picture is not null)
                    {
                        await RepositoryServiceManager.FileStorageService.DeleteFile(picture.PublicId);
                    }
                    var updatedFile = await RepositoryServiceManager.FileStorageService.SaveFile(file, AppConstant.PostPictureTag);
                    if (updatedFile is not null)
                    {
                        var pictureFile = await RepositoryServiceManager.PictureService.UpdatePicture(new PictureUpdateDTO(picture.Id, updatedFile.FileUrl, updatedFile.PublicId));
                        Model.PictureId = pictureFile.Id;
                    }
                }
                else
                {
                    // var formFile = new FormFile(file.OpenReadStream(file.Size), 0, file.Size, file.Name, file.Name);
                    var fileResult = await RepositoryServiceManager.FileStorageService.SaveFile(file, AppConstant.PostPictureTag);
                    if (fileResult is not null)
                    {
                        var pictureFile = await RepositoryServiceManager.PictureService.CreatePicture(new PictureCreateDTO(fileResult.FileUrl, fileResult.PublicId));
                        Model!.PictureId = pictureFile.Id;
                    }
                }
            }

        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
