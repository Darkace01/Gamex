@page "/posts/create"
@inject IRepositoryServiceManager RepositoryServiceManager
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-6">
        <h1>Create Post</h1>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <a href="/posts" class="btn btn-secondary">Go Back</a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <EditForm Model="@Model" OnValidSubmit="HandleSubmit" FormName="CreatePost">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" role="alert" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <div class="form-floating mb-3">
                <InputText @bind-Value="@Model!.Title" class="form-control" autocomplete="title" aria-required="true" placeholder="Please enter post title." disabled="@IsLoading" />
                <label for="title" class="form-label">Title</label>
                <ValidationMessage For="@(() => Model.Title)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputTextArea @bind-Value="@Model.Content" class="form-control" autocomplete="content" aria-required="true" placeholder="Please enter post content." row="4" disabled="@IsLoading" />
                <label for="content" class="form-label">Content</label>
                <ValidationMessage For="@(() => Model.Content)" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="file-upload" class="form-label">Featured Image</label>
                <InputFile class="form-control" OnChange="HandleFileUpload" disabled="@IsLoading" id="file-upload" />
            </div>

            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary" disabled="@IsLoading">Create</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private PostCreateDTO? Model { get; set; }

    public string errorMessage { get; set; } = "";

    private bool IsLoading { get; set; } = false;
    long maxFileSize = 1024 * 1024 * 10;
    string[] imageFileExtension = { ".jpg", ".jpeg", ".png", ".gif" };

    protected override void OnInitialized() => Model ??= new();

    private async Task HandleSubmit()
    {
        if (IsLoading == true) return;
        IsLoading = true;

        try
        {
            var currentUser = await GetCurrentUser();
            var post = await RepositoryServiceManager.PostService.CreatePost(Model!, currentUser);
            NavigationManager.NavigateTo("/posts");
        }
        catch (Exception ex)
        {
            errorMessage = "An error has occurred, please contact your administrator for help";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task<ApplicationUser> GetCurrentUser()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authenticationState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        return user!;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            if (IsLoading == true) return;
            IsLoading = true;
            var file = e.File;

            if (file is not null)
            {
                var currentUser = await GetCurrentUser();

                var (isValid, error) = CommonHelpers.CheckFileSize(file, maxFileSize);

                if (!isValid)
                {
                    errorMessage = error;
                    IsLoading = false;
                    return;
                }

                var (isImage, errorImage) = CommonHelpers.CheckFileExtension(file, imageFileExtension);

                if (!isImage)
                {
                    errorMessage = errorImage;
                    IsLoading = false;
                    return;
                }

                var formFile = new FormFile(file.OpenReadStream(file.Size), 0, file.Size, file.Name, file.Name);
                var fileResult = await RepositoryServiceManager.FileStorageService.SaveFile(file, "post-picture");
                if (fileResult is not null)
                {
                    var pictureFile = await RepositoryServiceManager.PictureService.CreatePictureForUser(new PictureCreateDTO(fileResult.FileUrl, fileResult.PublicId), currentUser.Id);
                    Model!.PictureId = pictureFile.Id;
                }
            }
            
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            IsLoading = false;
        }
    }
}
