@attribute [Authorize(Roles = AppConstant.AdminUserRole)]
@page "/"
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(prerender: true))
@inject IRepositoryServiceManager RepositoryServiceManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager


<PageTitle>Dashboard</PageTitle>

<div class="row">
    <div class="col-md-6">
        <h1>Dashboard</h1>
    </div>
</div>

<div class="row">
    <div class="col-md-3">
        <div class="card border-dark mb-3">
            <div class="card-body text-dark">
                <h2 class="card-title ">@Model.RegisteredUsers</h2>
                <p class="card-text">Registered Users</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card border-dark mb-3">
            <div class="card-body text-dark">
                <h2 class="card-title">@Model.Tournaments</h2>
                <p class="card-text">Tournaments</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card border-dark mb-3">
            <div class="card-body text-dark">
                <h2 class="card-title">@Model.UsersInWaitlist</h2>
                <p class="card-text">Users in Waitlist</p>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card border-dark mb-3">
            <div class="card-body text-dark">
                <h2 class="card-title">@Model.Posts</h2>
                <p class="card-text">Posts</p>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Recent Tournaments</h4>
            </div>
            <div class="card-body">
                <QuickGrid Items="@TournamentFiltered" Pagination="@pagination" Virtualize="true" @ref="TournamentGrid">
                    <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
                    <PropertyColumn Property="@(p => p.StartDate)" Format="yyyy-MM-dd" Sortable="true" Title="Start Date" />
                    <PropertyColumn Property="@(p => p.EndDate)" Format="yyyy-MM-dd" Sortable="true" Title="End Date" />
                    <TemplateColumn Title="Is Featured">
                        <div class="d-flex justify-content-between">
                            @{
                                if (context.IsFeatured == false)
                                {
                                    <span class="badge bg-secondary">Not Featured</span>
                                }
                                else
                                {
                                    <span class="badge bg-primary">Featured</span>
                                }
                            }
                        </div>
                    </TemplateColumn>
                    <PropertyColumn Property="@(p => p.Location)" Sortable="true" />
                    <PropertyColumn Property="@(p => p.TotalRegisteredCount)" Title="Registered Users" Sortable="true" />
                    <TemplateColumn Title="Categories">
                        <div class="d-flex justify-content-between">
                            @if (context.Categories is not null)
                            {
                                foreach (var category in context.Categories)
                                {
                                    <span class="badge bg-dark">@category.Name</span>
                                }
                            }
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Rounds">
                        <div class="d-flex justify-content-between">
                            <span class="badge bg-info">@context.RoundsCount</span>
                        </div>
                    </TemplateColumn>
                </QuickGrid>
                <Paginator State="@pagination" />
            </div>
            <div class="card-footer">

                <a href="/tournaments" class="btn btn-primary">View Tournaments</a>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Recent Post</h4>
            </div>
            <div class="card-body">
                <QuickGrid Items="@PostFiltered" Pagination="@pagination" Virtualize="true" @ref="PostGrid">
                    <PropertyColumn Property="@(p => p.Title)" Sortable="true" />
                    <PropertyColumn Property="@(p => p.Content.Substring(0, Math.Min(p.Content.Length, 50)))" Title="Summary" />

                    <PropertyColumn Property="@(p => p.User.DisplayName)" Sortable="true" Title="Author" />
                    <TemplateColumn Title="Tags">
                        @foreach (var tag in context.Tag)
                        {
                            <span class="badge bg-primary">@tag.Name</span>
                        }
                    </TemplateColumn>
                    <TemplateColumn Title="Archived" Sortable="true">
                        @if (context.IsArchived == true)
                        {
                            <span class="badge bg-success">Yes</span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">No</span>
                        }
                    </TemplateColumn>

                </QuickGrid>
                <Paginator State="@pagination" />
            </div>
            <div class="card-footer">
                <a href="/posts" class="btn btn-primary">View Posts</a>
            </div>
        </div>
    </div>
</div>

@code {
    DashboardDTO Model = new();
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private IQueryable<TournamentDTO> TournamentList = default;
    QuickGrid<TournamentDTO>? TournamentGrid;

    QuickGrid<PostDTO>? PostGrid;
    private IQueryable<PostDTO>? PostList = default;

    protected override async Task OnInitializedAsync()
    {
        TournamentList = RepositoryServiceManager.TournamentService.GetAllTournaments().ToList().AsQueryable();
        PostList = RepositoryServiceManager.PostService.GetAllPosts().ToList().AsQueryable();
        Model = await RepositoryServiceManager.DashboardService.GetDashboardStats();
    }

    IQueryable<TournamentDTO> TournamentFiltered
    {
        get
        {
            return TournamentList;
        }
    }

    IQueryable<PostDTO> PostFiltered
    {
        get
        {
            return PostList;
        }
    }
}