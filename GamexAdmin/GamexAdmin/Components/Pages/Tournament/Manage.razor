@page "/tournaments/manage-users/{Id}"
@attribute [Authorize(Roles = AppConstant.AdminUserRole)]
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IRepositoryServiceManager RepositoryServiceManager
@rendermode @(new InteractiveServerRenderMode(prerender: true))

<div class="row">
    <div class="col-md-6">
        <h1>Manage Tournament</h1>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <a href="/tournaments" class="btn btn-secondary">Go Back</a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        @{
            if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
        }
        <QuickGrid Items="@TournamentUsersFiltered" Pagination="@pagination" Virtualize="true" @ref="TournamentGrid">
            <PropertyColumn Property="@(p => p.DisplayName)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Email)" Sortable="true" />
            <TemplateColumn Title="Wait List Status">
                @{
                    if (context.IsInWaitList)
                    {
                        <span class="badge bg-secondary">In Waitlist</span>
                    }
                    else
                    {
                        <span class="badge bg-primary">In Tournament</span>
                    }
                }
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                @{
                    if (context.IsInWaitList)
                    {
                        <button class="btn btn-primary" @onclick="(() => HandleApprove(context,true))" disabled="@IsLoading">
                            Approve @if (IsLoading == true)
                            {
                                <Loading />
                            }
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-warning" @onclick="(() => HandleApprove(context,false))" disabled="@IsLoading">
                            Move to Waitlist  @if (IsLoading == true)
                            {
                                <Loading />
                            }
                        </button>
                    }
                }
            </TemplateColumn>
        </QuickGrid>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    public Guid TournamentId { get; set; }

    public string errorMessage { get; set; } = "";
    private bool IsLoading { get; set; }
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    QuickGrid<TournamentUserDTO> TournamentGrid;

    private IQueryable<TournamentUserDTO>? TournamentUsers { get; set; }

    IQueryable<TournamentUserDTO> TournamentUsersFiltered => TournamentUsers ?? Enumerable.Empty<TournamentUserDTO>().AsQueryable();

    protected override void OnInitialized()
    {
        if (Guid.TryParse(Id, out var tournamentId))
        {
            TournamentId = tournamentId;
        }
        LoadTournamentUsers();
    }

    private void LoadTournamentUsers()
    {
        TournamentUsers = RepositoryServiceManager.TournamentService.GetTournamentUsers(TournamentId).ToList().AsQueryable();
    }

    private async Task HandleDelete(TournamentUserDTO tournamentUser)
    {
        var user = await UserManager.FindByEmailAsync(tournamentUser.Email);
        if (user == null)
        {
            errorMessage = "User not found";
            return;
        }
    }

    private async Task<ApplicationUser?> GetCurrentUser()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authenticationState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        return user;
    }

    private async void HandleApprove(TournamentUserDTO tournamentUser, bool status, CancellationToken cancellationToken = default)
    {
        try
        {
            IsLoading = true;
            await RepositoryServiceManager.TournamentService.UpdateUserWaitListStatus(TournamentId, tournamentUser.UserId, status, cancellationToken);
            // OnInitialized();
            LoadTournamentUsers();
            IsLoading = false;
        }
        catch (Exception)
        {
            errorMessage = "An error occurred while approving the user";
            throw;
        }
    }
}
