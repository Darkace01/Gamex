@page "/tournaments/manage-players/{TournamentId}/{RoundId}/{MatchId}"
@attribute [Authorize(Roles = AppConstant.AdminUserRole)]
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IRepositoryServiceManager RepositoryServiceManager
@rendermode @(new InteractiveServerRenderMode(prerender: true))

<PageTitle>Manage Match Players</PageTitle>

<div class="row">
    <div class="col-md-6">
        <h1>Match Players</h1>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <a href="/tournaments/matches-players/create/@TournamentId/@RoundId/@MatchId" class="btn btn-primary">Add Players</a>
            <a href="/tournaments/manage-matches/@TournamentId/@RoundId" class="btn btn-secondary mx-2">Go Back</a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <QuickGrid Items="@MatchPlayerList" Pagination="@pagination" Virtualize="true" @ref="MatchPlayerGrid">
            <PropertyColumn Property="@(p => p.DisplayName)" Title="Player" Sortable="true" />
            <PropertyColumn Property="@(p => p.Points)" Title="Points" Sortable="true" />
            <TemplateColumn Title="Win">
                <div class="d-flex justify-content-between">
                    <span class="badge bg-primary">@context.Win</span>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Loss">
                <div class="d-flex justify-content-between">
                    <span class="badge bg-danger">@context.Loss</span>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Draw">
                <div class="d-flex justify-content-between">
                    <span class="badge bg-black">@context.Draw</span>
                </div>
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                <button class="btn btn-danger" @onclick="(() => HandleDelete(context, new CancellationToken()))">Remove Player</button>
                <a class="btn btn-info" href="tournaments/matches-players/edit/@TournamentId/@RoundId/@MatchId/@context.MatchUserId">Update</a>
            </TemplateColumn>
        </QuickGrid>
    </div>
</div>

@code {
    [Parameter]
    public string RoundId { get; set; }
    [Parameter]
    public string TournamentId { get; set; }
    [Parameter]
    public string MatchId { get; set; }

    public Guid RoundGuidId { get; set; }
    public Guid MatchGuidId { get; set; }

    private IQueryable<MatchUserDTO> MatchPlayerList = default!;
    QuickGrid<MatchUserDTO> MatchPlayerGrid = default!;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private bool IsLoading { get; }

    protected override void OnInitialized()
    {
        if (Guid.TryParse(RoundId, out var roundId))
        {
            RoundGuidId = roundId;
        }
        if (Guid.TryParse(MatchId, out var matchId))
        {
            MatchGuidId = matchId;
        }
        MatchPlayerList = RepositoryServiceManager.MatchUserService.GetMatchUsersByMatchId(MatchGuidId).ToList().AsQueryable();
    }

    private async Task HandleDelete(MatchUserDTO matchUser, CancellationToken cancellationToken)
    {
        (bool isSuccessful, string message) = await RepositoryServiceManager.MatchUserService.DeleteMatchUser(matchUser.MatchUserId);
        if (isSuccessful)
        {
            MatchPlayerList = RepositoryServiceManager.MatchUserService.GetMatchUsersByMatchId(MatchGuidId).ToList().AsQueryable();
        }
    }
}
