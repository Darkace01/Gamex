@page "/tournaments/edit/{Id}"
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IRepositoryServiceManager RepositoryServiceManager
@rendermode InteractiveAuto

<div class="row">
    <div class="col-md-6">
        <h1>Edit Tournament</h1>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <a href="/tournaments" class="btn btn-secondary">Go Back</a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <EditForm Model="@Model" OnValidSubmit="HandleSubmit" FormName="EditTournament" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" role="alert" />
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            @* <InputText @bind-Value="Model.Id.ToString()" hidden /> *@
            <div class="form-floating mb-3">
                <InputText @bind-Value="@Model.Name" class="form-control" autocomplete="name" aria-required="true" placeholder="Please enter tournament name." disabled="@IsLoading"/>
                <label for="name" class="form-label">Name</label>
                <ValidationMessage For="@(() => Model.Name)" class="text-danger" />
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="@Model.StartDateForm" class="form-control" autocomplete="start-date" aria-required="true" placeholder="Please enter tournament start date." disabled="@IsLoading"/>
                        <label for="start-date" class="form-label">Start Date</label>
                        <ValidationMessage For="@(() => Model.StartDateForm)" class="text-danger" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="@Model.EndDateForm" class="form-control" autocomplete="end-date" aria-required="true" placeholder="Please enter tournament end date."disabled="@IsLoading" />
                        <label for="end-date" class="form-label">End Date</label>
                        <ValidationMessage For="@(() => Model.EndDateForm)" class="text-danger" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="@Model.Location" class="form-control" autocomplete="location" aria-required="true" placeholder="Please enter tournament location."disabled="@IsLoading" />
                        <label for="location" class="form-label">Location</label>
                        <ValidationMessage For="@(() => Model.Location)" class="text-danger" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <InputCheckbox @bind-Value="@Model.IsFeatured" class="form-check-input" autocomplete="isfeatured" aria-required="true" placeholder="Please enter tournament isfeatured." disabled="@IsLoading"/>
                        <label for="isfeatured" class="form-check-label">Is Featured</label>
                        <ValidationMessage For="@(() => Model!.IsFeatured)" class="text-danger" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputNumber @bind-Value="@Model.EntryFee" class="form-control" autocomplete="entry fee" aria-required="true" placeholder="Please enter tournament Entry Fee." disabled="@IsLoading"/>
                        <label for="entryFee" class="form-label">Entry Fee</label>
                        <ValidationMessage For="@(() => Model.EntryFee)" class="text-danger" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <label for="file-upload" class="form-label">Featured Image</label>
                        <InputFile class="form-control" OnChange="HandleFileUpload" disabled="@IsLoading" id="file-upload"/>
                    </div>
                </div>
            </div>
            <div class="form-floating mb-3">
                <InputTextArea @bind-Value="@Model.Description" class="form-control" autocomplete="description" aria-required="true" placeholder="Please enter tournament description." rows="4" disabled="@IsLoading"/>
                <label for="description" class="form-label">Description</label>
                <ValidationMessage For="@(() => Model.Description)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputTextArea @bind-Value="@Model.Rules" class="form-control" autocomplete="rules" aria-required="true" placeholder="Please enter tournament rules." rows="4" disabled="@IsLoading"/>
                <label for="rules" class="form-label">Rules</label>
                <ValidationMessage For="@(() => Model.Rules)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@IsLoading">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    public string errorMessage { get; set; } = "";


    [SupplyParameterFromForm]
    public TournamentUpdateDTO? Model { get; set; }

    private string PublicId { get; set; } = "";

    private bool IsLoading { get; set; } = false;
    long maxFileSize = 1024 * 1024 * 10;
    string[] imageFileExtension = { ".jpg", ".jpeg", ".png", ".gif" };

    protected override async Task OnInitializedAsync()
    {
        Model ??= new();
        _ = Guid.TryParse(Id, out Guid tournamentId);
        var tournament = await RepositoryServiceManager.TournamentService.GetTournamentById(tournamentId);
        if (tournament is not null)
        {
            Model = new TournamentUpdateDTO
                {
                    Id = tournament.Id,
                    Name = tournament.Name,
                    StartDateForm = tournament.StartDate,
                    EndDateForm = tournament.EndDate,
                    Location = tournament.Location,
                    Description = tournament.Description,
                    Rules = tournament.Rules,
                    IsFeatured = tournament.IsFeatured,
                    EntryFee = tournament.EntryFee,
                    PictureId = tournament.PictureId
                };

            PublicId = tournament.PicturePublicId ?? "";
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            var file = e.File;
            if (file is not null)
            {
                var (isValid, error) = CommonHelpers.CheckFileSize(file, maxFileSize);

                if (!isValid)
                {
                    errorMessage = error;
                    IsLoading = false;
                    return;
                }

                var (isImage, errorImage) = CommonHelpers.CheckFileExtension(file, imageFileExtension);
                if (!isImage)
                {
                    errorMessage = errorImage;
                    IsLoading = false;
                    return;
                }
                var tournamentId = Guid.Parse(Id);

                var formFile = new FormFile(file.OpenReadStream(file.Size), 0, file.Size, file.Name, file.Name);
                var fileResult = await RepositoryServiceManager.FileStorageService.SaveFile(file, "tournament-picture");
                if (fileResult is not null)
                {
                    var pictureFile = await RepositoryServiceManager.PictureService.CreatePicture(new PictureCreateDTO(fileResult.FileUrl, fileResult.PublicId));
                    Model!.PictureId = pictureFile.Id;
                }
            }
            IsLoading = false;
        }
        catch (Exception ex)
        {
            IsLoading = false;
            errorMessage = ex?.Message;
        }

    }

    private async Task HandleSubmit()
    {
        if (IsLoading == true) return;
        IsLoading = true;
        var currentUser = await GetCurrentUser();
        if (Model is not null)
        {
            var startDateStr = Model.StartDateForm.HasValue ? Model.StartDateForm.Value.ToString("dd/MM/yyyy") : "";
            var endDateStr = Model.EndDateForm.HasValue ? Model.EndDateForm.Value.ToString("dd/MM/yyyy") : "";

            Model.StartDateString = startDateStr;
            Model.EndDateString = endDateStr;
            // _ = Guid.TryParse(Id, out Guid tournamentId);
            // Model.Id = tournamentId;
            await RepositoryServiceManager.TournamentService.UpdateTournament(Model, currentUser);
            NavigationManager.NavigateTo("/tournaments");
        }
        IsLoading = false;
    }

    private async Task<ApplicationUser> GetCurrentUser()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authenticationState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        return user;
    }
}