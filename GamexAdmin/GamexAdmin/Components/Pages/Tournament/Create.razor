@page "/tournaments/create"
@inject ITournamentService TournamentService
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-6">
        <h1>Create Tournament</h1>
    </div>
    <div class="col-md-6">
        <div class="d-flex justify-content-end">
            <a href="/tournaments" class="btn btn-secondary">Go Back</a>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <EditForm Model="@Model" OnValidSubmit="HandleSubmit" FormName="CreateTournament">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="@Model.Name" class="form-control" autocomplete="name" aria-required="true" placeholder="Please enter tournament name." />
                <label for="name" class="form-label">Name</label>
                <ValidationMessage For="@(() => Model.Name)" class="text-danger" />
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="@Model.StartDateForm" class="form-control" autocomplete="start-date" aria-required="true" placeholder="Please enter tournament start date." />
                        <label for="start-date" class="form-label">Start Date</label>
                        <ValidationMessage For="@(() => Model.StartDateForm)" class="text-danger" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputDate @bind-Value="@Model.EndDateForm" class="form-control" autocomplete="end-date" aria-required="true" placeholder="Please enter tournament end date." />
                        <label for="end-date" class="form-label">End Date</label>
                        <ValidationMessage For="@(() => Model.EndDateForm)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="@Model.Location" class="form-control" autocomplete="location" aria-required="true" placeholder="Please enter tournament location." />
                        <label for="location" class="form-label">Location</label>
                        <ValidationMessage For="@(() => Model.Location)" class="text-danger" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-3">
                        <InputCheckbox @bind-Value="@Model.IsFeatured" class="form-check-input" autocomplete="isfeatured" aria-required="true" placeholder="Please enter tournament isfeatured." />
                        <label for="isfeatured" class="form-check-label">Is Featured</label>
                        <ValidationMessage For="@(() => Model.IsFeatured)" class="text-danger" />
                    </div>
                </div>
            </div>

            <div class="form-floating mb-3">
                <InputTextArea @bind-Value="@Model.Description" class="form-control" autocomplete="description" aria-required="true" placeholder="Please enter tournament description." />
                <label for="description" class="form-label">Description</label>
                <ValidationMessage For="@(() => Model.Description)" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputTextArea @bind-Value="@Model.Rules" class="form-control" autocomplete="rules" aria-required="true" placeholder="Please enter tournament rules." />
                <label for="rules" class="form-label">Rules</label>
                <ValidationMessage For="@(() => Model.Rules)" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputNumber @bind-Value="@Model.EntryFee" class="form-control" autocomplete="entry fee" aria-required="true" placeholder="Please enter tournament Entry Fee." />
                <label for="entryFee" class="form-label">Entry Fee</label>
                <ValidationMessage For="@(() => Model.EntryFee)" class="text-danger" />
            </div>

            <button type="submit" class="btn btn-primary w-100">Submit</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public TournamentCreateDTO? Model { get; set; }

    protected override void OnInitialized() => Model ??= new();

    private async Task HandleSubmit()
    {
        var currentUser = await GetCurrentUser();
        if (Model is not null)
        {
            var startDateStr = Model.StartDateForm.HasValue ? Model.StartDateForm.Value.ToString("dd/MM/yyyy") : "";
            var endDateStr = Model.EndDateForm.HasValue ? Model.EndDateForm.Value.ToString("dd/MM/yyyy") : "";

            Model.StartDateString = startDateStr;
            Model.EndDateString = endDateStr;
            await TournamentService.CreateTournament(Model, currentUser);
            NavigationManager.NavigateTo("/tournaments");
        }
    }

    private async Task<ApplicationUser> GetCurrentUser()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userClaim = authenticationState.User;
        var user = await UserManager.GetUserAsync(userClaim);
        return user;
    }
}
